
// ==========================================================================
//  GPPG error listing for yacc source file <SimpleYacc.y>
// ==========================================================================
//  Version:  1.3.6
//  Machine:  LAPTOP-9M8I2R2U
//  DateTime: 04.11.2022 16:44:16
//  UserName: Алексей
// ==========================================================================


%{
// Ýòè îáúÿâëåíèÿ äîáàâëÿþòñÿ â êëàññ GPPGParser, ïðåäñòàâëÿþùèé ñîáîé ïàðñåð, ãåíåðèðóåìûé ñèñòåìîé gppg
    public BlockNode root; // Êîðíåâîé óçåë ñèíòàêñè÷åñêîãî äåðåâà 
    public Parser(AbstractScanner<ValueType, LexLocation> scanner) : base(scanner) { }
	private bool InDefSect = false;
%}

%output = SimpleYacc.cs

%union { 
			public double dVal; 
			public int iVal; 
			public string sVal; 
			public Node nVal;
			public ExprNode eVal;
			public StatementNode stVal;
			public BlockNode blVal;
			public TypeNode tVal;
       }

%using System.IO;
%using ProgramTree;

%namespace SimpleParser

%start progr

%token BEGIN END CYCLE ASSIGN ASSIGNPLUS ASSIGNMINUS ASSIGNMULT SEMICOLON VAR PLUS MINUS MULT DIV LPAREN RPAREN COLUMN DIVI MOD IF THEN ELSE FUN
%token COLON RETURN
%token <iVal> INUM 
%token <dVal> RNUM 
%token <sVal> ID 


%type <tVal> type
%type <eVal> expr ident T F func_call valueParam
%type <stVal> statement assign block cycle empty if return
%type <stVal> declaration var_decl func_decl params param valueParams
%type <blVal> stlist block

%%
// Warning: NonTerminal symbol "type" is unreachable
// Error: NonTerminal symbol "type" has no productions
// Error: There are 1 non-terminating NonTerminal Symbols
   //  {type}
// Warning: Terminating type fixes the following size-1 NonTerminal set
   // {type}
// --------------------------------------------------------------------

progr   : block { root = $1; }
		;

stlist	: 
		 stlist SEMICOLON statement 
			{ 
			$1.Add($3); 
				$$ = $1; 
			}
			| statement 
			{ 
				$$ = new BlockNode($1); 
			}
		;

statement: assign { $$ = $1; }
		| block   { $$ = $1; }
		| cycle   { $$ = $1; }
		| declaration {$$ = $1;}
		| if      { $$ = $1; }
		| return  {$$ = $1;}
		| empty   { $$ = $1; }
		;

empty	: { $$ = new EmptyNode(); }
		;
	
ident 	: ID 
		{
			
			$$ = new IdNode($1); 
		}	
	;
	
assign 	: ident ASSIGN expr { $$ = new AssignNode($1 as IdNode, $3); }
		;

expr	: expr PLUS T { $$ = new BinOpNode($1,$3,'+'); }
		| expr MINUS T { $$ = new BinOpNode($1,$3,'-'); }
		| T { $$ = $1; }
		;
		
T 		: T MULT F { $$ = new BinOpNode($1,$3,'*'); }
		| T DIV F { $$ = new BinOpNode($1,$3,'/'); }
		| T MOD F {$$ = new BinOpNode($1,$3,'%');}
		| T DIVI F {$$ = new BinOpNode($1,$3,'\\');}
		| F { $$ = $1; }
		;
		
F 		: ident  { $$ = $1 as IdNode; }
		| INUM { $$ = new IntNumNode($1); }
		| RNUM {$$ = new RealNumNode($1);}
		| LPAREN expr RPAREN { $$ = $2; }
		| func_call {$$ = $1;}
		;

block	: BEGIN stlist END { $$ = $2; }
		;

if		: IF expr THEN statement {$$  = new IfNode($2, $4, null);}
		| IF expr THEN statement ELSE statement	{$$ = new IfNode($2, $4, $6);}
		;

cycle	: CYCLE expr statement { $$ = new CycleNode($2,$3); }
		;
		
declaration : var_decl	{$$ = $1;}
		| func_decl		
		;

var_decl : ident ident {$$ =  new VarNode($1, $2 as IdNode, "variable");}
		| ident ident ASSIGN expr
		;

func_decl : FUN ident LPAREN params RPAREN COLON ident block
		;

params  : param 
		| param COLUMN params
		;

param	: ident COLON ident
		;

return	: RETURN expr | RETURN
		;

func_call : ident LPAREN valueParams RPAREN
		;

valueParams : valueParam
		| valueParam COLUMN valueParam
		| empty
		;

valueParam : expr 
		;

%%

// ==========================================================================

